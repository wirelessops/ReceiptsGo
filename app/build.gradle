plugins {
    id("com.android.application")
    id("com.github.triplet.play") version "3.8.1"
    id("org.jlleitschuh.gradle.ktlint")
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'


android {
 	namespace 'com.wops.receiptsgo'

    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1016
        versionName "1.1.2"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        // Required for espresso (plus clears the app on launch)
        testInstrumentationRunner "co.smartreceipts.android.test.runner.ApplicationAwareAndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true', listener: 'co.smartreceipts.android.test.runner.CrashingRunListener'
    }


    signingConfigs {

        def localProperties = new Properties()
        def localPropertiesFile = rootProject.file('local.properties')

        if (localPropertiesFile.exists()) {
            localPropertiesFile.withReader('UTF-8') { reader ->
                localProperties.load(reader)
            }
        }

        debug {
            storeFile file("../keystore/debug.keystore")
        }
        release {
            
            storeFile file(localProperties.getProperty('storeFile'))
            storePassword localProperties.getProperty('storePassword')
            keyAlias localProperties.getProperty('keyAlias')
            keyPassword localProperties.getProperty('keyPassword')

        }
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    bundle {
        language {
            // We include all languages to allow users to choose their report language
            enableSplit = false
        }
        density {
            // Performing initial tests with the split disabled for simplicity
            enableSplit = false
        }
        abi {
            // Force this reduce the size of PDF generation libraries to avoid an Android bug
            enableSplit = true
        }
    }



    flavorDimensions "versionType"

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
    }

    productFlavors {
        free {
            applicationId "com.wops.receiptsgo"
            dimension "versionType"
            proguardFile 'flavor-not-floss-rules.pro'
            missingDimensionStrategy 'isFloss', 'notFloss'
        }
        plusFlavor {
            applicationId "com.wops.receiptsgopro"
            dimension "versionType"
            proguardFile 'flavor-not-floss-rules.pro'
            missingDimensionStrategy 'isFloss', 'notFloss'
        }
        fireDepartmentFlavor {
            applicationId "co.smartreceipts.fire.department.tracker.android"
            dimension "versionType"
            proguardFile 'flavor-not-floss-rules.pro'
            missingDimensionStrategy 'isFloss', 'notFloss'
        }
        flossFlavor {
            applicationId "com.wops.receiptsgo.floss"
            dimension"versionType"
            missingDimensionStrategy 'isFloss', 'floss'
        }
    }

    lintOptions {
        abortOnError false
        disable 'InvalidPackage', 'MissingTranslation'
    }

    testOptions {
        animationsDisabled = true
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
            all {
                jvmArgs '-noverify'
            }
        }
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    dependencies {
        implementation fileTree(dir: 'libs', include: '*.jar')
        implementation project(':core')
        implementation project(':wbMiniLibrary')
        implementation project(':aws')
        implementation project(':push')
        implementation project(':automatic_backups')
        implementation project(':oss_licenses')


        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

        implementation "androidx.core:core-ktx:$KTX_VERSION"
        implementation "androidx.appcompat:appcompat:$APPCOMPAT_VERSION"
        implementation "androidx.cardview:cardview:$CARDVIEW_VERSION"
        implementation "androidx.constraintlayout:constraintlayout:$CONSTRAINT_LAYOUT_VERSION"
        implementation "androidx.exifinterface:exifinterface:$EXIFINTERFACE_VERSION"
        implementation "androidx.legacy:legacy-support-v4:$LEGACY_SUPPORT_V4_VERSION"
        implementation "androidx.multidex:multidex:$MULTIDEX_VERSION"
        implementation "androidx.recyclerview:recyclerview:$RECYCLERVIEW_VERSION"
        implementation "com.google.android.material:material:$MATERIAL_DESIGN_VERSION"
        implementation "com.android.billingclient:billing:$BILLING_VERSION"

        implementation("com.google.apis:google-api-services-drive:$GOOGLE_DRIVE_API_VERSION") {
            exclude group: 'org.apache.httpcomponents'
        }
        implementation "com.google.http-client:google-http-client-gson:$GOOGLE_HTTP_CLIENT_VERSION"

        implementation "com.squareup.picasso:picasso:$PICASSO_VERSION"
        implementation "com.squareup.okhttp3:okhttp:$OK_HTTP_VERSION"
        implementation "com.squareup.okhttp3:logging-interceptor:$OK_HTTP_VERSION"
        implementation "com.squareup.retrofit2:retrofit:$RETROFIT_VERSION"
        implementation "com.squareup.retrofit2:converter-gson:$RETROFIT_VERSION"
        implementation "com.squareup.moshi:moshi:$MOSHI_VERSION"
        implementation "com.squareup.moshi:moshi-adapters:$MOSHI_VERSION"
        kapt "com.squareup.moshi:moshi-kotlin-codegen:$MOSHI_VERSION"
        implementation "com.squareup.retrofit2:converter-moshi:$RETROFIT_VERSION"

        //Rx2
        implementation "com.jakewharton.rxbinding3:rxbinding:$RX2_BINDING_VERSION"
        implementation "com.jakewharton.rxbinding3:rxbinding-appcompat:$RX2_BINDING_VERSION"
        implementation "com.squareup.retrofit2:adapter-rxjava2:$RETROFIT_VERSION"

        implementation "commons-io:commons-io:$IO_UTILS_VERSION"
        implementation "com.hadisatrio:Optional:$OPTIONAL_VERSION"

        implementation "com.github.tapadoo:alerter:$ALERTER_VERSION"

        implementation "com.tom-roush:pdfbox-android:$PDFBOX_ANDROID_VERSION"
        implementation "com.github.barteksc:pdfium-android:$PDFIUM_VERSION"

        implementation "com.github.tony19:logback-android:$LOGBACK_VERSION"

        // Note: Periodically check for updates here so we can revert to the official version
        // implementation "com.github.PhilJay:MPAndroidChart:$MP_ANDROID_CHART_VERSION"
        implementation "com.github.wbaumann:MPAndroidChart:$MP_ANDROID_CHART_FORK_WITH_FIXES_VERSION"

        implementation("com.h6ah4i.android.widget.advrecyclerview:advrecyclerview:$ADV_RECYCLER_VIEW_VERSION@aar") {
            transitive = true
        }

        implementation "com.hannesdorfmann:adapterdelegates4-kotlin-dsl-viewbinding:$ADAPTER_DELEGATES_VERSION"

        implementation "com.github.pqpo:SmartCropper:$SMART_CROPPER_VERSION"

        implementation "org.joda:joda-money:$JODA_MONEY_VERSION"

        implementation "com.google.android.play:review-ktx:$PLAY_IN_APP_REVIEW_VERSION"

        // Dagger
        kapt "com.google.dagger:dagger-compiler:$DAGGER_VERSION"
        kapt "com.google.dagger:dagger-android-processor:$DAGGER_VERSION"

        // Unit Tests
        testImplementation "org.robolectric:robolectric:$ROBOLECTRIC_VERSION"
        testImplementation "junit:junit:$JUNIT_VERSION"
        testImplementation "org.mockito:mockito-core:$MOCKITO_VERSION"
        testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$MOCKITO_KOTLIN_VERSION"
        testImplementation "androidx.test:core:$ANDROID_TEST_RUNNER_VERSION"

        // Espresso Tests
        androidTestImplementation "androidx.test.espresso:espresso-core:$ESPRESSO_VERSION"
        androidTestImplementation "androidx.test.espresso:espresso-intents:$ESPRESSO_VERSION"
        androidTestImplementation "androidx.test.ext:junit:$JUNIT_EXT_VERSION"
        androidTestImplementation "androidx.test:runner:$ANDROID_TEST_RUNNER_VERSION"
        androidTestImplementation "androidx.test:rules:$ANDROID_TEST_RUNNER_VERSION"
        androidTestUtil "androidx.test:orchestrator:$ANDROID_TEST_ORCHESTRATOR_VERSION"

        // Leak Canary
        debugImplementation "com.squareup.leakcanary:leakcanary-android:$LEAK_CANARY_VERSION"

        // Special dependencies for free flavor
        freeImplementation "com.google.android.gms:play-services-analytics:$GOOGLE_ANALYTICS_VERSION"

        // Free ads
        freeImplementation "com.google.android.gms:play-services-ads:$ADMOB_VERSION"
    }

    // Note: This version is controlled in the base build file
    apply plugin: "com.google.gms.google-services"
    compileOptions {
        targetCompatibility JavaVersion.VERSION_11
        sourceCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

ktlint {
    android.set(true)
}

